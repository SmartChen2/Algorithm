#include <iostream>
using namespace std; 

#define MAX_E 1000
#define MAX_V 1000
#define INF 1000000


struct edge {
	int from, to, cost;
};
edge es[MAX_E];

int d[MAX_V];
int V, E, i, j;

void shortest_path(int s) 
{
	for (i = 0; i < V; i++)
		d[i] = INF;
	d[s] = 0;
	while(true) 
	{
		bool update = false;
		for (i = 0; i < E; i++)
		{
			edge e = es[i];
			if (d[e.from] != INF && d[e.to] > d[e.from] + e.cost)
			{
				d[e.to] = d[e.from] + e.cost;
				update = true;
			}
		}
		if (!update) break;
	}
}
bool find_negative_loop(void) 
{
	
	for (i = 0; i < V; i++)
		d[i] = 0;
		
	for (i = 0; i < V; i++)
	{
		for (j = 0; j < E; j++)
		{
			edge e = es[j];
			if (d[e.to] > d[e.from] + e.cost)
			{
				d[e.to] = d[e.from] + e.cost;
				if (i == V - 1) return true;
			}
		}
	}
	return false;
}
int main()
{
	while (1)
	{
		cin >> V;
		cin >> E;
		for (i = 0; i < E; i++)
		{
			cin >> es[i].from;
			cin >> es[i].to;
			cin >> es[i].cost;
		}
		
		cout << find_negative_loop() << endl;
	}
    return 0;
}
3 3
0 1 5
1 2 4
2 0 -6

3 3
0 1 5
1 2 4
2 0 -100

3 3
0 1 -1
1 2 -1
2 0 2

3 3
0 1 -1
1 2 -1
2 0 1

3 3
0 1 -2
1 2 -5
2 0 7

3 3
0 1 -2
1 2 -5
2 0 7
6
